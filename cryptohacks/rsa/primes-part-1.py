import gmpy2
import math
def trans(x):
	# return bytes.fromhex(hex(x)[2:])
	try: 
		return bytes.fromhex(hex(x)[2:]).decode("ascii")
	except:
		# return bytes.fromhex('0' + hex(x)[2:]).decode("ascii")
		return None

def main():
	
	# 2; used alpertron to factor n
	n = 742449129124467073921545687640895127535705902454369756401331
	e = 3
	ct = 39207274348578481322317340648475596807303160111338236677373
	p = 752708788837165590355094155871 
	q = 986369682585281993933185289261
	phi = (p-1) * (q-1)
	d = gmpy2.invert(e, phi)
	plain = pow(ct, d,n)
	print(trans(plain))


	# 3: 
	n = 171731371218065444125482536302245915415603318380280392385291836472299752747934607246477508507827284075763910264995326010251268493630501989810855418416643352631102434317900028697993224868629935657273062472544675693365930943308086634291936846505861203914449338007760990051788980485462592823446469606824421932591                                                                  
	e = 65537
	ct = 161367550346730604451454756189028938964941280347662098798775466019463375610700074840105776873791605070092554650190486030367121011578171525759600774739890458414593857709994072516290998135846956596662071379067305011746842247628316996977338024343628757374524136260758515864509435302781735938531030576289086798942  
	phi = n - 1
	d = gmpy2.invert(e, phi)
	plain = pow(ct, d, n)
	print(trans(plain))

	# 4:
	N = 535860808044009550029177135708168016201451343147313565371014459027743491739422885443084705720731409713775527993719682583669164873806842043288439828071789970694759080842162253955259590552283047728782812946845160334801782088068154453021936721710269050985805054692096738777321796153384024897615594493453068138341203673749514094546000253631902991617197847584519694152122765406982133526594928685232381934742152195861380221224370858128736975959176861651044370378539093990198336298572944512738570839396588590096813217791191895941380464803377602779240663133834952329316862399581950590588006371221334128215409197603236942597674756728212232134056562716399155080108881105952768189193728827484667349378091100068224404684701674782399200373192433062767622841264055426035349769018117299620554803902490432339600566432246795818167460916180647394169157647245603555692735630862148715428791242764799469896924753470539857080767170052783918273180304835318388177089674231640910337743789750979216202573226794240332797892868276309400253925932223895530714169648116569013581643192341931800785254715083294526325980247219218364118877864892068185905587410977152737936310734712276956663192182487672474651103240004173381041237906849437490609652395748868434296753449
	e = 65537
	c = 222502885974182429500948389840563415291534726891354573907329512556439632810921927905220486727807436668035929302442754225952786602492250448020341217733646472982286222338860566076161977786095675944552232391481278782019346283900959677167026636830252067048759720251671811058647569724495547940966885025629807079171218371644528053562232396674283745310132242492367274184667845174514466834132589971388067076980563188513333661165819462428837210575342101036356974189393390097403614434491507672459254969638032776897417674577487775755539964915035731988499983726435005007850876000232292458554577437739427313453671492956668188219600633325930981748162455965093222648173134777571527681591366164711307355510889316052064146089646772869610726671696699221157985834325663661400034831442431209123478778078255846830522226390964119818784903330200488705212765569163495571851459355520398928214206285080883954881888668509262455490889283862560453598662919522224935145694435885396500780651530829377030371611921181207362217397805303962112100190783763061909945889717878397740711340114311597934724670601992737526668932871436226135393872881664511222789565256059138002651403875484920711316522536260604255269532161594824301047729082877262812899724246757871448545439896
	gmpy2.get_context().precision=10000
	p = int(gmpy2.sqrt(N))
	# print(p)
	phi = (p-1) * (p)
	d = gmpy2.invert(e, phi)
	plain = pow(c, d, N)
	print(trans(plain))


	# 5:
	n = 580642391898843192929563856870897799650883152718761762932292482252152591279871421569162037190419036435041797739880389529593674485555792234900969402019055601781662044515999210032698275981631376651117318677368742867687180140048715627160641771118040372573575479330830092989800730105573700557717146251860588802509310534792310748898504394966263819959963273509119791037525504422606634640173277598774814099540555569257179715908642917355365791447508751401889724095964924513196281345665480688029639999472649549163147599540142367575413885729653166517595719991872223011969856259344396899748662101941230745601719730556631637
	e = 65537
	ct = 320721490534624434149993723527322977960556510750628354856260732098109692581338409999983376131354918370047625150454728718467998870322344980985635149656977787964380651868131740312053755501594999166365821315043312308622388016666802478485476059625888033017198083472976011719998333985531756978678758897472845358167730221506573817798467100023754709109274265835201757369829744113233607359526441007577850111228850004361838028842815813724076511058179239339760639518034583306154826603816927757236549096339501503316601078891287408682099750164720032975016814187899399273719181407940397071512493967454225665490162619270814464
	# factoring done using alpertron
	temp = "9 282105 380008 121879 × 9 303850 685953 812323 × 9 389357 739583 927789 × 10 336650 220878 499841 × 10 638241 655447 339831 × 11 282698 189561 966721 × 11 328768 673634 243077 × 11 403460 639036 243901 × 11 473665 579512 371723 × 11 492065 299277 279799 × 11 530534 813954 192171 × 11 665347 949879 312361 × 12 132158 321859 677597 × 12 834461 276877 415051 × 12 955403 765595 949597 × 12 973972 336777 979701 × 13 099895 578757 581201 × 13 572286 589428 162097 × 14 100640 260554 622013 × 14 178869 592193 599187 × 14 278240 802299 816541 × 14 523070 016044 624039 × 14 963354 250199 553339 × 15 364597 561881 860737 × 15 669758 663523 555763 × 15 824122 791679 574573 × 15 998365 463074 268941 × 16 656402 470578 844539 × 16 898740 504023 346457 × 17 138336 856793 050757 × 17 174065 872156 629921 × 17 281246 625998 849649"
	factors = temp.split("×")
	factors = [int(i.replace(" ", "")) for i in factors]
	phi = 1
	for i in factors:
		phi *= (i-1)
	d = gmpy2.invert(e, phi)
	plain = pow(ct, d, n)
	print(trans(plain))









if __name__ == '__main__':
	main()
	