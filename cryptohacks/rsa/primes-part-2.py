import gmpy2
from Crypto.Util.number import long_to_bytes, isPrime
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP

def decrypt(e, phi, n, c):
	d = gmpy2.invert(e, phi)
	plain = pow(c, d, n)
	return bytes.fromhex(hex(plain)[2:]).decode("ascii")

def fermat_factorization(n):
	gmpy2.get_context().precision = 10000
	a = gmpy2.sqrt(n)
	# if a is a purrfect square, we are done
	if (a - int(a) == 0):
		return [a, a]
	a = int(a) + 1
	while (1):
		a2 = a * a
		b2 = a2 - n
		b = gmpy2.sqrt(b2)

		# check if b2 is a purrfect square
		if (int(b) - b == 0):
			break
		else:
			a+=1
	p = a - b
	q = a + b
	return [p,q]

def infinite_descent():
	# this uses fermat's factoring algorithm
	n = 383347712330877040452238619329524841763392526146840572232926924642094891453979246383798913394114305368360426867021623649667024217266529000859703542590316063318592391925062014229671423777796679798747131250552455356061834719512365575593221216339005132464338847195248627639623487124025890693416305788160905762011825079336880567461033322240015771102929696350161937950387427696385850443727777996483584464610046380722736790790188061964311222153985614287276995741553706506834906746892708903948496564047090014307484054609862129530262108669567834726352078060081889712109412073731026030466300060341737504223822014714056413752165841749368159510588178604096191956750941078391415634472219765129561622344109769892244712668402761549412177892054051266761597330660545704317210567759828757156904778495608968785747998059857467440128156068391746919684258227682866083662345263659558066864109212457286114506228470930775092735385388316268663664139056183180238043386636254075940621543717531670995823417070666005930452836389812129462051771646048498397195157405386923446893886593048680984896989809135802276892911038588008701926729269812453226891776546037663583893625479252643042517196958990266376741676514631089466493864064316127648074609662749196545969926051
	e = 65537
	c = 98280456757136766244944891987028935843441533415613592591358482906016439563076150526116369842213103333480506705993633901994107281890187248495507270868621384652207697607019899166492132408348789252555196428608661320671877412710489782358282011364127799563335562917707783563681920786994453004763755404510541574502176243896756839917991848428091594919111448023948527766368304503100650379914153058191140072528095898576018893829830104362124927140555107994114143042266758709328068902664037870075742542194318059191313468675939426810988239079424823495317464035252325521917592045198152643533223015952702649249494753395100973534541766285551891859649320371178562200252228779395393974169736998523394598517174182142007480526603025578004665936854657294541338697513521007818552254811797566860763442604365744596444735991732790926343720102293453429936734206246109968817158815749927063561835274636195149702317415680401987150336994583752062565237605953153790371155918439941193401473271753038180560129784192800351649724465553733201451581525173536731674524145027931923204961274369826379325051601238308635192540223484055096203293400419816024111797903442864181965959247745006822690967920957905188441550106930799896292835287867403979631824085790047851383294389

	p, q = fermat_factorization(n)
	phi = int((p-1) * (q-1))

	return decrypt(e, phi, n, c)

def marin_secrets():
	n= 658416274830184544125027519921443515789888264156074733099244040126213682497714032798116399288176502462829255784525977722903018714434309698108208388664768262754316426220651576623731617882923164117579624827261244506084274371250277849351631679441171018418018498039996472549893150577189302871520311715179730714312181456245097848491669795997289830612988058523968384808822828370900198489249243399165125219244753790779764466236965135793576516193213175061401667388622228362042717054014679032953441034021506856017081062617572351195418505899388715709795992029559042119783423597324707100694064675909238717573058764118893225111602703838080618565401139902143069901117174204252871948846864436771808616432457102844534843857198735242005309073939051433790946726672234643259349535186268571629077937597838801337973092285608744209951533199868228040004432132597073390363357892379997655878857696334892216345070227646749851381208554044940444182864026513709449823489593439017366358869648168238735087593808344484365136284219725233811605331815007424582890821887260682886632543613109252862114326372077785369292570900594814481097443781269562647303671428895764224084402259605109600363098950091998891375812839523613295667253813978434879172781217285652895469194181218343078754501694746598738215243769747956572555989594598180639098344891175879455994652382137038240166358066403475457 
	e= 65537
	c= 400280463088930432319280359115194977582517363610532464295210669530407870753439127455401384569705425621445943992963380983084917385428631223046908837804126399345875252917090184158440305503817193246288672986488987883177380307377025079266030262650932575205141853413302558460364242355531272967481409414783634558791175827816540767545944534238189079030192843288596934979693517964655661507346729751987928147021620165009965051933278913952899114253301044747587310830419190623282578931589587504555005361571572561916866063458812965314474160499067525067495140150092119620928363007467390920130717521169105167963364154636472055084012592138570354390246779276003156184676298710746583104700516466091034510765027167956117869051938116457370384737440965109619578227422049806566060571831017610877072484262724789571076529586427405780121096546942812322324807145137017942266863534989082115189065560011841150908380937354301243153206428896320576609904361937035263985348984794208198892615898907005955403529470847124269512316191753950203794578656029324506688293446571598506042198219080325747328636232040936761788558421528960279832802127562115852304946867628316502959562274485483867481731149338209009753229463924855930103271197831370982488703456463385914801246828662212622006947380115549529820197355738525329885232170215757585685484402344437894981555179129287164971002033759724456
	# print(len(str(n)))

	# trial and error
	a = pow(2, 2203) - 1
	b = pow(2, 2281) - 1
	assert (a * b == n)
	phi = (a -1) * (b-1)
	return decrypt(e, phi, n, c)


def fast_primes():
	# solution is to use ROCA attack
	'''
	-----BEGIN PUBLIC KEY-----
	MFswDQYJKoZIhvcNAQEBBQADSgAwRwJATKIe3jfj1qY7zuX5Eg0JifAUOq6RUwLz
	Ruiru4QKcvtW0Uh1KMp1GVt4MmKDiQksTok/pKbJsBFCZugFsS3AjQIDAQAB
	-----END PUBLIC KEY-----
	'''
	ci= '249d72cd1d287b1a15a3881f2bff5788bc4bf62c789f2df44d88aae805b54c9a94b8944c0ba798f70062b66160fee312b98879f1dd5d17b33095feb3c5830d28'
	m= '4ca21ede37e3d6a63bcee5f9120d0989f0143aae915302f346e8abbb840a72fb56d1487528ca75195b7832628389092c4e893fa4a6c9b0114266e805b12dc08d'
	e= '10001'
	public_key = RSA.importKey(open('/Users/exodia/Downloads/fastprimeskey.pem', 'r').read())

	m = public_key.n

	e = public_key.e
	c = int(ci, 16)


	# To install neca:
	# git clone https://gitlab.com/jix/neca
	# mkdir build
	# cd build
	# cmake ..
	# Factorization found:
	n = 51894141255108267693828471848483688186015845988173648228318286999011443419469 * 77342270837753916396402614215980760127245056504361515489809293852222206596161
	p = 51894141255108267693828471848483688186015845988173648228318286999011443419469
	q = 77342270837753916396402614215980760127245056504361515489809293852222206596161
	assert(m == n)
	print(e)
	assert (p * q == m)
	print(isPrime(p), isPrime(q))
	phi = (p-1) * (q-1)
	d = gmpy2.invert(e, phi)
	key = RSA.construct((n, e, int(d)))
	# print("key is: ", key)
	# print(long_to_bytes(f))
	cipher = PKCS1_OAEP.new(key)
	# temp = cipher.encrypt('hi')
	# print(temp)
	plaintext = cipher.decrypt(bytes.fromhex(ci))
	# return decrypt(e, phi, m, c)
	return plaintext




def main():
	# print("infinite descent sol: ", infinite_descent())
	# print("marin_secrets sol: ", marin_secrets())
	print("fast primes sol: ", fast_primes())

if __name__ == '__main__':
	main()

